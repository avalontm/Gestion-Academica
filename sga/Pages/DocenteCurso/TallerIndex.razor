@page "/docente/curso/taller/{taller_codigo}"
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<!-- Seccion donde el docente creara las tareas/trabajos del taller para el curso seleccionado -->

<div class="container">
    <div class="row">
        <div class="col-25">
            <div class="table-title">
                <h3>@curso?.nombre - <b>@taller?.nombre</b></h3>
            </div>
        </div>

        <div class="container-spacing">
            <button class="btn btn-outline-dark btn-lg" @onclick="onNew"> <span class="oi oi-plus"> NUEVA TAREA</span></button>
        </div>

        <div class="col-75">
            <div class="wrap-input100">
                <input class="input100" type="search" id="search" name="search" asp-for="SearchString" placeholder="Buscar" @oninput="onFilter">
                <span class="focus-input100"></span>
                <span class="symbol-input100">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </span>
                <input type="submit" value="Submit" hidden />
            </div>
        </div>
    </div>
</div>

<div class="content-lotes">
    <table class="table-fill">
        <thead>
            <tr>
                <th class="text-left" width="180"> Fecha Creacion </th>
                <th class="text-left"> Nombre del taller </th>
                <th class="text-left" width="190"> Fecha Entrega </th>
                <th class="text-left" width="80"> Activo </th>
                <th class="text-left" width="120"> Menu </th>
            </tr>
        </thead>

        <tbody class="table-hover">
            @if(tareas != null)
            {
                @foreach (var item in tareas)
                {
                    <tr>
                        <td class="text-left">&nbsp; @item.created_at.ToString("dd-MM-yyyy")</td>
                        <td class="text-left">&nbsp;<a class="disabled-link" href="/tarea/@item.codigo"><b>@item.titulo</b></a> </td>

                        <td class="text-left">&nbsp; @item.fecha_entrega.ToString("dd-MM-yyyy | hh:mm:ss")</td>

                        <td class="text-left">&nbsp; 
                            
                            @if(item.activo)
                            {
                                <div class="icon-activo" alt="Activo"/>
                            }else
                            {
                                <div class="icon-desactivo"alt="Desactivado"/>
                            }

                        </td>

                        <td width="120px">
                            <div class="dropdown show">
                                <a class="btn btn-secondary dropdown-toggle btn-formato" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span class="oi oi-data-transfer-download btn-icon"> </span> <b>ACCIONES</b>
                                </a>

                                <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                                    <div>
                                        <button class="menu-item" @onclick="@(() => onSee(item))">VER</button>
                                    </div>
                                    <div>
                                        <button class="menu-item" @onclick="@(() => onEdit(item))">EDITAR</button>
                                    </div>
                                    <div>
                                        <button class="menu-item-delete" @onclick="@(() => onDelete(item))">ELIMINAR</button>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


<div class="container-footer"></div>

<DialogDefault @ref=@dialog />
<DialogModel @ref=@dialogModel />

@code {
    [ParameterAttribute]
    public string? taller_codigo { set; get; }
    [Inject] IToastService? toastService { set; get; }
    AuthModel auth { set; get; } = new();
    Taller taller { set; get; }
    Curso curso { set; get; }
    List<Tarea> tareas { set; get; }
    DialogDefault? dialog;
    DialogModel? dialogModel;
    string? FilterString { set; get; }

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        if (!auth.status)
        {
            NavigationManager.NavigateTo("/account", true);
            return;
        }

        onLoadTaller();
        StateHasChanged();
    }

    void onLoadTaller()
    {
        taller = Taller.Find(taller_codigo);

        if (taller != null)
        {
            if(taller.user_id != auth.user.id)
            {
                NavigationManager.NavigateTo("/denegado", true);
                return;
            }
        }

        curso = Curso.Find(taller.curso_id);


        tareas = Tarea.Get(taller.id);
    }

    void onNew()
    {
        if (curso == null)
        {
            toastService.ShowError($"Solo los docentes pueden crear nuevos talleres para el curso.");
            return;
        }

        dialogModel.OnReturn = onEditReturn;
        dialogModel.Show(new Tarea() { created_at = DateTime.Now, updated_at = DateTime.Now, curso_id = curso.id, taller_id = taller.id, fecha_entrega = DateTime.Now.AddDays(7), limite =1, user_id = auth.user.id, codigo = StringManager.GenerateString() });
    }

    async void onEditReturn(object sender, object e)
    {
        Tarea item = e as Tarea;

        if (string.IsNullOrEmpty(item.titulo))
        {
            toastService.ShowError($"Se requiere que un titulo para la tarea");
            return;
        }

        if (item.titulo.Length < 3)
        {
            toastService.ShowError($"El titulo del taller debe ser de al menos 3 caracteres");
            return;
        }

        item.contenido = await ((DialogModel)sender).QuillHtml.GetHTML();

        if (item.id == 0)
        {
            try
            {

                if (item.Insert())
                {
                    toastService.ShowSuccess($"Se ha agregado la tarea: {item.titulo}");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError($"{ex.Message}");
                return;
            }
        }
        else
        {
            try
            {
                if (item.Update())
                {
                    toastService.ShowSuccess($"Se ha actualizado la tarea: {item.titulo}");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError($"{ex.Message}");
                return;
            }
        }

        tareas = Tarea.Filter(taller.id, FilterString);
        dialogModel.Close();

        StateHasChanged();
    }

    void onFilter(ChangeEventArgs args)
    {
        FilterString = args.Value.ToString();
        tareas = Tarea.Filter(taller.id, FilterString);
    }

    async void onSee(Tarea item)
    {
        await jsRuntime.InvokeVoidAsync("open", new object[2] { $"tarea/{item.codigo}", "_self" });
    }

    void onEdit(Tarea item)
    {
        dialogModel.OnReturn = onEditReturn;
        dialogModel.ShowEditor(item, item.contenido);
    }

    void onDelete(Tarea item)
    {
        dialog.OnReturn = onDeleteReturn;
        dialog.Model = item;
        dialog.Show("Confirmar", "¿Esta seguro que desea eliminar este taller?", DialogButton.YESNO);
    }

    void onDeleteReturn(object sender, object e)
    {
        Tarea item = e as Tarea;

        item.eliminado = true;

        if (item.Update())
        {
            tareas = Tarea.Filter(taller.id, FilterString);
            toastService.ShowSuccess($"Se ha eliminado {item.titulo}");
        }

        StateHasChanged();
    }
}
