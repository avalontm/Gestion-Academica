@page "/"
@using BlazorCalendar
@using BlazorCalendar.Models
@using System.Diagnostics;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<div class="container">
    @if (auth.status)
    {
        <div class="container-spacing">
            <h2>Calendario de tareas</h2>
        </div>

        <div class="container-calendar">
            <CalendarContainer DisplayedView="DisplayedView.Monthly" TasksList="Tareas.ToArray()">
                <MonthlyView Style="height:80vh"  PriorityDisplay="@PriorityDisplay" TaskClick="TaskClick" />
            </CalendarContainer>

        </div>

    }
    else
    {
        <div class="container-spacing">
            <h2>Para poder acceder al contenido es neserio identificar tu cuenta.</h2>
        </div>
    }
</div>


@code{
    AuthModel auth { set; get; } = new();
    List<Tasks> Tareas { set; get; } = new ();
    PriorityLabel PriorityDisplay = PriorityLabel.Code;

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        if (!auth.status)
        {
            NavigationManager.NavigateTo("/account", true);
            return;
        }

        onLoadCalendario();
        StateHasChanged();
    }

    void onLoadCalendario()
    {
        DateTime today = DateTime.Now;

        var _tareas = Tarea.GetByCalendar(today);
        Tareas.Clear();

        foreach(var item in _tareas)
        {
            Tasks task = new Tasks();
            task.ID = item.id;
            task.DateStart = item.fecha_entrega;
            task.DateEnd = item.fecha_entrega;
            task.Code = item.titulo;
            task.Color = "#FFD800";

            Tareas.Add(task);
        }

    }

    async void TaskClick(ClickTaskParameter task)
    {
        await jsRuntime.InvokeVoidAsync("open", new object[2] { $"/calendario/{task.Day.ToString("yyyy-MM-dd")}", "_self" });
    }
}