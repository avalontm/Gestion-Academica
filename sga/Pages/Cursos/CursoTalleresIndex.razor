@page "/curso/{curso_codigo}"

@using System.Diagnostics;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<div class="container">

    <div class="container-spacing">
        <h2>Curso de <b>@curso?.nombre</b></h2>
    </div>

</div>

<div class="container">
    @if (talleres != null)
    {
        @foreach (var item in talleres)
        {
            <div class="container-curso">
                <div class="row">
                    <div class="col-2">
                        <button class="curso-go " @onclick=@(() => TallerClick(item))>
                            <div class="curso-door"></div>
                        </button>

                    </div>
                    <div class="col">
                        <div>
                            <label class="curso-titulo"><b>@item.nombre</b></label>
                        </div>
                        <div>
                            <label class="curso-docente">
                                @item.created_at.ToString("dddd dd \\de\\ MMMM \\del\\ yyyy")
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        }

    }
</div>
@code {
    [ParameterAttribute]
    public string? curso_codigo { set; get; }
    [Inject] IToastService? toastService { set; get; }
    AuthModel auth { set; get; } = new();
    List<Taller> talleres { set; get; }
    Curso? curso { set; get; }

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        if (!auth.status)
        {
            NavigationManager.NavigateTo("/account", true);
            return;
        }

        onLoadCurso();
        onLoadTalleres();
        StateHasChanged();
    }

    void onLoadCurso()
    {
        curso = Curso.Find(curso_codigo);
    }

    void onLoadTalleres()
    {
        talleres = Taller.Get(curso.id);
    }

    async void TallerClick(Taller item)
    {
        await jsRuntime.InvokeVoidAsync("open", new object[2] { $"taller/{item.codigo}", "_self" });
    }
}
