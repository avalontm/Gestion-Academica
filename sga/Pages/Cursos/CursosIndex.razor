@page "/cursos"
@using System.Diagnostics;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<!-- Seccion donde el estudiante se le mostraran sus cursos actuales -->

<div class="container">

     <div class="container-spacing">
            <h2>Mis Cursos</h2>
        </div>

</div>

<div class="container">
    @if (cursos != null)
    {
        @foreach (var item in cursos)
        {
            <div class="container-curso">
                <div class="row">
                    <div class="col-2">
                        <button class="curso-go " @onclick=@(() => CursoClick(item))>
                            <div class="curso-door"></div>
                        </button>

                    </div>
                    <div class="col">
                        <div>
                            <label class="curso-titulo"><b>@item.nombre</b></label>
                        </div>
                        <div>
                            <label class="curso-docente">@(
                        User.Find(item.user_id)?.nombre
                        )</label>
                        </div>
                    </div>
                </div>
            </div>
        }

    }
</div>

@code {
    AuthModel auth { set; get; } = new();
    List<Curso> cursos { set; get; }

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        if (!auth.status)
        {
            NavigationManager.NavigateTo("/account", true);
            return;
        }

        onLoadCursos();
        StateHasChanged();
    }

    void onLoadCursos()
    {
        cursos = Curso.Get();
        Debug.WriteLine($"[Cursos] {cursos.Count}");
    }

    async void CursoClick(Curso item)
    {
        await jsRuntime.InvokeVoidAsync("open", new object[2] { $"curso/{item.codigo}", "_self" });
    }
}
