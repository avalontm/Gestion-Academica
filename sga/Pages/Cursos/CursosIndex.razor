@page "/cursos"
@using System.Diagnostics;
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager

<div class="container">

     <div class="container-spacing">
            <h2>Mis Cursos</h2>
        </div>

</div>

<div class="container">

    @foreach(var item in cursos)
    {
        <div class="container-curso">
            <div>
                <label class="curso-titulo"><b>@item.nombre</b></label>
            </div>
            <div>
                <label class="curso-docente">@(User.Find(item.user_id)?.nombre)</label>
            </div>
        </div>
    }
</div>

@code {
    AuthModel auth { set; get; } = new();
    List<Curso> cursos { set; get; }

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        if (!auth.status)
        {
            NavigationManager.NavigateTo("/account", true);
            return;
        }

        onLoadCursos();
        StateHasChanged();
    }

    void onLoadCursos()
    {
        cursos = Curso.Get();
        Debug.WriteLine($"[Cursos] {cursos.Count}");
    }
}
