@using Blazored.Toast
@using Blazored.Toast.Configuration;
@using System.Diagnostics;
@using Microsoft.AspNetCore.SignalR.Client;
@using Append.Blazor.Notifications
@inject INotificationService NotificationService
@inherits LayoutComponentBase
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager NavigationManager
@inject HubConnection HubConnection

<PageTitle>Gestion Academica</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (auth.status)
            {
                <div class="top-row px-4">
                    <div class="dropdown pointer" style="float:right;">
                        @if (string.IsNullOrEmpty(auth.user.avatar))
                        {
                            <img class="nav-avatar" src="/media/avatares/default.jpg" />
                        }
                        else
                        {
                            <img class="nav-avatar" src="@auth.user.avatar" />
                        }
                        <div class="dropdown-content">
                            <a href="/account/perfil">Mi Perfil</a>
                            <a href="/account/logout"><span class="glyphicon glyphicon-log-out"></span>Cerrar Sesion</a>
                        </div>
                    </div>

                    <div style="margin-left:10px;">
                        <p>@auth.user.nombre</p>
                    </div>

                </div>
            }
            else
            {
                <div class="top-row px-4">
                    <a class="btn logout" href="/account"><span class="glyphicon glyphicon-log-in"></span> Iniciar Sesion</a>
                </div>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>

    <BlazoredToasts Position="ToastPosition.BottomRight" Timeout="3" />
</div>

@code
{
    AuthModel auth { set; get; } = new();
    [Inject] IToastService? toastService { set; get; }

    protected async override Task OnInitializedAsync()
    {
        auth = await this.GetAuth(GetAuthenticationStateAsync);

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            HubConnection.On<string>("Notification", async (message) =>
               {
                   NotificationOptions options = new NotificationOptions
                       {
                           Body = message,
                           Icon = "https://raw.githubusercontent.com/avalontm/Gestion-Academica/b12657fb84ef436d0ade87207ed1b7a7358cbeb0/sga/wwwroot/media/img-01.png",
                           Image = "https://raw.githubusercontent.com/avalontm/Gestion-Academica/b12657fb84ef436d0ade87207ed1b7a7358cbeb0/sga/wwwroot/media/img-01.png",
                            
                       };

                   await NotificationService.CreateAsync("Ite Ensenada", options);
                   InvokeAsync(StateHasChanged);
               });

            await HubConnection.StartAsync();

            bool IsSupportedByBrowser = await NotificationService.IsSupportedByBrowserAsync();
            Debug.WriteLine($"[IsSupportedByBrowser] {IsSupportedByBrowser}");
            if (IsSupportedByBrowser)
            {
                PermissionType permission = await NotificationService.RequestPermissionAsync();
                Debug.WriteLine($"[permission] {permission}");
            }

        }
    }

}