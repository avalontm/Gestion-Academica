@implements IDisposable

@if (showDialog)
{
        <div id="ServiceOKModal" class="modal fade @DialogCssCandidates" style="display:block; background-color: rgba(10,10,10,.25);" aria-modal="true" role="dialog">
        <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title w-100">@Title</h4>
                    @if (canClose)
                    {
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    }
                </div>
                    <div class="modal-body">
                        <p class="text-center">@Message</p>
                    </div>
                    <div class="modal-footer">

                    @switch(Button)
                    {
                        case DialogButton.OK:
                            <button type="button" class="btn btn-primary w-min-100" @onclick="onOK">OK</button>
                        break;
                        case DialogButton.YESNO:
                            <button type="button" class="btn btn-secondary w-min-100" @onclick="onCancel">NO</button>
                            <button type="button" class="btn btn-primary w-min-100" @onclick="onOK">SI</button>
                        break;
                    }
                   

                    </div>
                </div>
            </div>
        </div>
}

@code {
    private DotNetObjectReference<DialogDefault>? selfReference;
    public EventHandler<object>? OnReturn { set; get; }
    public object Model { set; get; }

    bool showDialog = false;
    string? DialogCssCandidates => showDialog ? "show" : "hide";
    string? Title;
    string? Message;
    bool canClose;
   
    DialogButton Button;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfReference = DotNetObjectReference.Create(this);
        }
    }

    public void Show(string title, string message, DialogButton button = DialogButton.OK, bool can_close = false)
    {
        Title = title;
        Message = message;
        canClose = can_close;
        Button = button;
        showDialog = true;
        this.StateHasChanged();
    }

    public void Close()
    {
        showDialog = false;
        Message = string.Empty;
        this.StateHasChanged();
    }

    public void onCancel()
    {
        Close();
    }

    public void onOK()
    {
        OnReturn?.Invoke(this, Model);
        Close();
    }

    public void Dispose() => selfReference?.Dispose();
}